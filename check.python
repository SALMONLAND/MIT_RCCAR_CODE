import tkinter as tk
from tkinter import ttk, messagebox
import serial
import serial.tools.list_ports
import threading
import time
import re

class F1RaceMonitor:
    def __init__(self, root):
        self.root = root
        self.root.title("🏎️ F1 Dual Race Monitor")
        self.root.geometry("1400x900")
        self.root.configure(bg='#0a0a0a')
        
        self.serial_port = None
        self.is_connected = False
        self.is_racing = False
        
        # 레이스 데이터
        self.car1_data = {
            'current_lap': 0,
            'current_time': 0,
            'lap_times': [],
            'best_lap': None,
            'total_time': 0,
            'status': 'ready',
            'position': 1,
            'distance': 0
        }
        
        self.car2_data = {
            'current_lap': 0,
            'current_time': 0,
            'lap_times': [],
            'best_lap': None,
            'total_time': 0,
            'status': 'ready',
            'position': 2,
            'distance': 0
        }
        
        self.race_status = 'ready'  # ready, countdown, racing, finished
        self.total_laps = 3
        
        self.setup_ui()
        
    def setup_ui(self):
        # 상단 연결 프레임
        top_frame = tk.Frame(self.root, bg='#1a1a1a', padx=20, pady=15)
        top_frame.pack(fill='x')
        
        tk.Label(top_frame, text="Arduino 포트:", bg='#1a1a1a', fg='white', 
                font=('Arial', 11, 'bold')).pack(side='left', padx=5)
        
        self.port_combo = ttk.Combobox(top_frame, width=15, state='readonly', 
                                       font=('Arial', 10))
        self.port_combo.pack(side='left', padx=5)
        self.refresh_ports()
        
        self.connect_btn = tk.Button(top_frame, text="🔌 연결", command=self.toggle_connection,
                                     bg='#00ff00', fg='black', font=('Arial', 11, 'bold'),
                                     padx=20, pady=8, cursor='hand2')
        self.connect_btn.pack(side='left', padx=10)
        
        self.refresh_btn = tk.Button(top_frame, text="🔄", command=self.refresh_ports,
                                     bg='#333333', fg='white', font=('Arial', 11),
                                     padx=15, pady=8, cursor='hand2')
        self.refresh_btn.pack(side='left', padx=5)
        
        self.status_label = tk.Label(top_frame, text="● 연결 안됨", bg='#1a1a1a', 
                                     fg='#ff0000', font=('Arial', 11, 'bold'))
        self.status_label.pack(side='left', padx=20)
        
        # 레이스 컨트롤
        self.start_btn = tk.Button(top_frame, text="▶ START RACE", command=self.start_race,
                                   bg='#00cc00', fg='white', font=('Arial', 12, 'bold'),
                                   padx=30, pady=10, cursor='hand2', state='disabled')
        self.start_btn.pack(side='right', padx=5)
        
        self.reset_btn = tk.Button(top_frame, text="🔄 RESET", command=self.reset_race,
                                   bg='#cc0000', fg='white', font=('Arial', 12, 'bold'),
                                   padx=30, pady=10, cursor='hand2')
        self.reset_btn.pack(side='right', padx=5)
        
        # 레이스 상태 표시
        status_frame = tk.Frame(self.root, bg='#1a1a1a', padx=20, pady=10)
        status_frame.pack(fill='x')
        
        tk.Label(status_frame, text="RACE STATUS:", bg='#1a1a1a', fg='#888888',
                font=('Arial', 10)).pack(side='left', padx=10)
        
        self.race_status_label = tk.Label(status_frame, text="🏁 READY", bg='#1a1a1a', 
                                          fg='#ffff00', font=('Arial', 24, 'bold'))
        self.race_status_label.pack(side='left', padx=20)
        
        # 메인 디스플레이 영역
        main_frame = tk.Frame(self.root, bg='#0a0a0a', padx=10, pady=10)
        main_frame.pack(fill='both', expand=True)
        
        # Car 1 영역
        self.car1_frame = self.create_car_display(main_frame, 1, '#ff0000')
        self.car1_frame.pack(side='left', fill='both', expand=True, padx=5)
        
        # Car 2 영역
        self.car2_frame = self.create_car_display(main_frame, 2, '#0066ff')
        self.car2_frame.pack(side='left', fill='both', expand=True, padx=5)
        
    def create_car_display(self, parent, car_num, color):
        frame = tk.Frame(parent, bg='#1a1a1a', relief='solid', bd=3)
        
        # 헤더
        header = tk.Frame(frame, bg=color, pady=15)
        header.pack(fill='x')
        
        tk.Label(header, text=f"CAR {car_num}", bg=color, fg='white',
                font=('Arial', 28, 'bold')).pack()
        tk.Label(header, text=f"Section {car_num}", bg=color, fg='white',
                font=('Arial', 12)).pack()
        
        # 메인 정보
        info_frame = tk.Frame(frame, bg='#1a1a1a', pady=10)
        info_frame.pack(fill='both', expand=True, padx=10)
        
        # 현재 랩 & 포지션
        top_info = tk.Frame(info_frame, bg='#1a1a1a')
        top_info.pack(fill='x', pady=5)
        
        lap_frame = tk.Frame(top_info, bg='#2a2a2a', padx=20, pady=15)
        lap_frame.pack(side='left', fill='both', expand=True, padx=5)
        tk.Label(lap_frame, text="CURRENT LAP", bg='#2a2a2a', fg='#888888',
                font=('Arial', 10)).pack()
        lap_label = tk.Label(lap_frame, text=f"0/{self.total_laps}", bg='#2a2a2a', fg='white',
                            font=('Arial', 32, 'bold'))
        lap_label.pack()
        
        pos_frame = tk.Frame(top_info, bg='#2a2a2a', padx=20, pady=15)
        pos_frame.pack(side='left', fill='both', expand=True, padx=5)
        tk.Label(pos_frame, text="POSITION", bg='#2a2a2a', fg='#888888',
                font=('Arial', 10)).pack()
        pos_label = tk.Label(pos_frame, text="P1" if car_num == 1 else "P2", 
                            bg='#2a2a2a', fg='#ffff00',
                            font=('Arial', 32, 'bold'))
        pos_label.pack()
        
        # 현재 랩 타임
        current_time_frame = tk.Frame(info_frame, bg='#2a2a2a', padx=20, pady=15)
        current_time_frame.pack(fill='x', pady=5)
        tk.Label(current_time_frame, text="⏱️ CURRENT LAP TIME", bg='#2a2a2a', fg='#888888',
                font=('Arial', 11)).pack()
        current_time_label = tk.Label(current_time_frame, text="0.00s", bg='#2a2a2a', 
                                     fg='#00ff00', font=('Courier', 40, 'bold'))
        current_time_label.pack()
        
        # 베스트 랩
        best_lap_frame = tk.Frame(info_frame, bg='#2a2a2a', padx=20, pady=15)
        best_lap_frame.pack(fill='x', pady=5)
        tk.Label(best_lap_frame, text="⚡ BEST LAP", bg='#2a2a2a', fg='#888888',
                font=('Arial', 11)).pack()
        best_lap_label = tk.Label(best_lap_frame, text="-.---s", bg='#2a2a2a', 
                                 fg='#ff00ff', font=('Courier', 28, 'bold'))
        best_lap_label.pack()
        
        # 총 시간
        total_time_frame = tk.Frame(info_frame, bg='#2a2a2a', padx=20, pady=10)
        total_time_frame.pack(fill='x', pady=5)
        tk.Label(total_time_frame, text="TOTAL TIME", bg='#2a2a2a', fg='#888888',
                font=('Arial', 10)).pack()
        total_time_label = tk.Label(total_time_frame, text="0.00s", bg='#2a2a2a', 
                                   fg='white', font=('Courier', 20, 'bold'))
        total_time_label.pack()
        
        # 센서 거리
        distance_frame = tk.Frame(info_frame, bg='#2a2a2a', padx=20, pady=10)
        distance_frame.pack(fill='x', pady=5)
        tk.Label(distance_frame, text="📡 SENSOR DISTANCE", bg='#2a2a2a', fg='#888888',
                font=('Arial', 10)).pack()
        distance_label = tk.Label(distance_frame, text="-- cm", bg='#2a2a2a', 
                                 fg='white', font=('Courier', 18, 'bold'))
        distance_label.pack()
        
        # 랩 타임 리스트
        lap_times_frame = tk.Frame(info_frame, bg='#2a2a2a', padx=15, pady=10)
        lap_times_frame.pack(fill='both', expand=True, pady=5)
        tk.Label(lap_times_frame, text="LAP TIMES", bg='#2a2a2a', fg='#888888',
                font=('Arial', 11, 'bold')).pack(anchor='w', pady=5)
        
        lap_times_text = tk.Text(lap_times_frame, height=6, bg='#1a1a1a', fg='white',
                                font=('Courier', 11), relief='flat')
        lap_times_text.pack(fill='both', expand=True)
        lap_times_text.config(state='disabled')
        
        # 위젯 참조 저장
        frame.lap_label = lap_label
        frame.pos_label = pos_label
        frame.current_time_label = current_time_label
        frame.best_lap_label = best_lap_label
        frame.total_time_label = total_time_label
        frame.distance_label = distance_label
        frame.lap_times_text = lap_times_text
        
        return frame
        
    def refresh_ports(self):
        ports = serial.tools.list_ports.comports()
        port_list = [port.device for port in ports]
        self.port_combo['values'] = port_list
        if port_list:
            self.port_combo.current(0)
    
    def toggle_connection(self):
        if not self.is_connected:
            self.connect_arduino()
        else:
            self.disconnect_arduino()
    
    def connect_arduino(self):
        port = self.port_combo.get()
        if not port:
            messagebox.showerror("에러", "포트를 선택해주세요")
            return
        
        try:
            self.serial_port = serial.Serial(port, 9600, timeout=1)
            time.sleep(2)  # Arduino 리셋 대기
            self.is_connected = True
            
            self.connect_btn.config(text="🔌 연결 해제", bg='#ff0000')
            self.status_label.config(text="● 연결됨", fg='#00ff00')
            self.start_btn.config(state='normal')
            
            # 읽기 스레드 시작
            self.read_thread = threading.Thread(target=self.read_serial, daemon=True)
            self.read_thread.start()
            
        except Exception as e:
            messagebox.showerror("연결 실패", f"Arduino 연결 실패:\n{str(e)}")
    
    def disconnect_arduino(self):
        self.is_connected = False
        if self.serial_port:
            self.serial_port.close()
        
        self.connect_btn.config(text="🔌 연결", bg='#00ff00')
        self.status_label.config(text="● 연결 안됨", fg='#ff0000')
        self.start_btn.config(state='disabled')
    
    def read_serial(self):
        while self.is_connected:
            try:
                if self.serial_port and self.serial_port.in_waiting:
                    line = self.serial_port.readline().decode('utf-8', errors='ignore').strip()
                    if line:
                        self.process_data(line)
            except Exception as e:
                print(f"읽기 오류: {e}")
                break
            time.sleep(0.01)
    
    def process_data(self, data):
        # 데이터 형식: "CAR1:LAP:1" 또는 "CAR1:DIST:15.5" 또는 "CAR2:LAP:2"
        try:
            parts = data.split(':')
            if len(parts) < 3:
                return
            
            car_id = parts[0]
            data_type = parts[1]
            value = parts[2]
            
            if car_id == 'CAR1':
                if data_type == 'DIST':
                    self.car1_data['distance'] = float(value)
                    self.update_distance_display(1, float(value))
                elif data_type == 'LAP':
                    self.handle_lap_complete(1, int(value))
                elif data_type == 'TIME':
                    self.car1_data['current_time'] = float(value)
                    self.update_current_time_display(1, float(value))
                    
            elif car_id == 'CAR2':
                if data_type == 'DIST':
                    self.car2_data['distance'] = float(value)
                    self.update_distance_display(2, float(value))
                elif data_type == 'LAP':
                    self.handle_lap_complete(2, int(value))
                elif data_type == 'TIME':
                    self.car2_data['current_time'] = float(value)
                    self.update_current_time_display(2, float(value))
                    
        except Exception as e:
            print(f"데이터 처리 오류: {e}")
    
    def start_race(self):
        if self.race_status != 'ready':
            return
        
        self.race_status = 'racing'
        self.is_racing = True
        self.race_status_label.config(text="🏁 RACING", fg='#00ff00')
        self.start_btn.config(state='disabled')
        
        # Arduino에 시작 신호 전송
        if self.serial_port:
            self.serial_port.write(b'START\n')
    
    def reset_race(self):
        self.race_status = 'ready'
        self.is_racing = False
        self.race_status_label.config(text="🏁 READY", fg='#ffff00')
        self.start_btn.config(state='normal' if self.is_connected else 'disabled')
        
        # 데이터 초기화
        self.car1_data = {
            'current_lap': 0, 'current_time': 0, 'lap_times': [],
            'best_lap': None, 'total_time': 0, 'status': 'ready',
            'position': 1, 'distance': 0
        }
        self.car2_data = {
            'current_lap': 0, 'current_time': 0, 'lap_times': [],
            'best_lap': None, 'total_time': 0, 'status': 'ready',
            'position': 2, 'distance': 0
        }
        
        # UI 업데이트
        self.update_all_displays()
        
        # Arduino에 리셋 신호 전송
        if self.serial_port:
            self.serial_port.write(b'RESET\n')
    
    def handle_lap_complete(self, car_num, lap_time_ms):
        car_data = self.car1_data if car_num == 1 else self.car2_data
        
        car_data['current_lap'] += 1
        car_data['lap_times'].append(lap_time_ms)
        
        if car_data['best_lap'] is None or lap_time_ms < car_data['best_lap']:
            car_data['best_lap'] = lap_time_ms
        
        self.update_all_displays()
        
        # 완주 체크
        if car_data['current_lap'] >= self.total_laps:
            car_data['status'] = 'finished'
            self.check_race_finished()
    
    def check_race_finished(self):
        if self.car1_data['status'] == 'finished' and self.car2_data['status'] == 'finished':
            self.race_status = 'finished'
            self.race_status_label.config(text="🏆 FINISHED", fg='#ffff00')
            self.update_positions()
    
    def update_positions(self):
        car1_total = sum(self.car1_data['lap_times']) if self.car1_data['lap_times'] else float('inf')
        car2_total = sum(self.car2_data['lap_times']) if self.car2_data['lap_times'] else float('inf')
        
        if car1_total < car2_total:
            self.car1_data['position'] = 1
            self.car2_data['position'] = 2
        else:
            self.car1_data['position'] = 2
            self.car2_data['position'] = 1
        
        self.update_all_displays()
    
    def update_all_displays(self):
        self.update_car_display(1, self.car1_data, self.car1_frame)
        self.update_car_display(2, self.car2_data, self.car2_frame)
    
    def update_car_display(self, car_num, data, frame):
        frame.lap_label.config(text=f"{data['current_lap']}/{self.total_laps}")
        frame.pos_label.config(text=f"P{data['position']}")
        frame.current_time_label.config(text=f"{data['current_time']/1000:.2f}s")
        
        if data['best_lap']:
            frame.best_lap_label.config(text=f"{data['best_lap']/1000:.3f}s")
        
        total = sum(data['lap_times']) if data['lap_times'] else 0
        frame.total_time_label.config(text=f"{total/1000:.2f}s")
        
        # 랩 타임 리스트 업데이트
        frame.lap_times_text.config(state='normal')
        frame.lap_times_text.delete(1.0, tk.END)
        for idx, lap_time in enumerate(data['lap_times']):
            best_marker = " 🏆" if lap_time == data['best_lap'] else ""
            frame.lap_times_text.insert(tk.END, f"Lap {idx+1}: {lap_time/1000:.3f}s{best_marker}\n")
        frame.lap_times_text.config(state='disabled')
    
    def update_distance_display(self, car_num, distance):
        frame = self.car1_frame if car_num == 1 else self.car2_frame
        color = '#ff0000' if distance < 15 else '#00ff00'
        frame.distance_label.config(text=f"{distance:.1f} cm", fg=color)
    
    def update_current_time_display(self, car_num, time_ms):
        frame = self.car1_frame if car_num == 1 else self.car2_frame
        frame.current_time_label.config(text=f"{time_ms/1000:.2f}s")

if __name__ == "__main__":
    root = tk.Tk()
    app = F1RaceMonitor(root)
    root.mainloop()

#include <LiquidCrystal_I2C.h>

#define TRIG_PIN 2
#define ECHO_PIN 3
#define BUZZER_PIN 8
#define THRESHOLD 15  // 감지 거리 임계값 (cm)

// LCD 설정 (I2C 주소 0x27, 16x2 LCD)
LiquidCrystal_I2C lcd(0x27, 16, 2);

// 상태 변수
int wheelCount = 0;
unsigned long startTime = 0;
unsigned long lapTime = 0;
bool isDetecting = false;
bool timerStarted = false;
bool raceStarted = false;
unsigned long lastUpdate = 0;

void setup() {
  Serial.begin(9600);
  
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  
  // LCD 초기화
  lcd.init();
  lcd.backlight();
  
  // 시작 화면
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Lap Time System");
  lcd.setCursor(0, 1);
  lcd.print("Ready...");
  
  Serial.println("=================================");
  Serial.println("바퀴 감지 시스템 시작");
  Serial.println("=================================");
  
  delay(2000);
  
  // F1 스타일 카운트다운 시작
  startF1Countdown();
  
  // 레이스 시작!
  startTime = millis();
  timerStarted = true;
  raceStarted = true;
  
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("GO! GO! GO!");
  lcd.setCursor(0, 1);
  lcd.print("Time: 0.00s");
  
  Serial.println(">>> 레이스 시작!");
  
  delay(1000);
}

void startF1Countdown() {
  lcd.clear();
  
  // 1개 불 켜기
  lcd.setCursor(0, 0);
  lcd.print("*");
  tone(BUZZER_PIN, 1000, 500);
  delay(1000);
  
  // 2개 불 켜기
  lcd.setCursor(3, 0);
  lcd.print("*");
  tone(BUZZER_PIN, 1000, 500);
  delay(1000);
  
  // 3개 불 켜기
  lcd.setCursor(6, 0);
  lcd.print("*");
  tone(BUZZER_PIN, 1000, 500);
  delay(1000);
  
  // 4개 불 켜기
  lcd.setCursor(9, 0);
  lcd.print("*");
  tone(BUZZER_PIN, 1000, 500);
  delay(1000);
  
  // 5개 불 켜기
  lcd.setCursor(12, 0);
  lcd.print("*");
  tone(BUZZER_PIN, 1000, 500);
  delay(1000);
  
  // 모든 불 끄기 (GO!)
  lcd.clear();
  lcd.setCursor(3, 0);
  lcd.print("GO! GO! GO!");
  tone(BUZZER_PIN, 2000, 1000);  // 높은 소리로 출발!
  delay(1000);
}

void loop() {
  long duration;
  float distance;
  
  // 초음파 센서로 거리 측정
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  
  duration = pulseIn(ECHO_PIN, HIGH, 30000);
  distance = duration * 0.034 / 2;
  
  // 거리가 임계값 이내로 감지되었을 때
  if (distance > 0 && distance < THRESHOLD && !isDetecting && raceStarted) {
    isDetecting = true;
    wheelCount++;
    
    Serial.print("바퀴 감지! (");
    Serial.print(wheelCount);
    Serial.print("번째) - 거리: ");
    Serial.print(distance);
    Serial.println(" cm");
    
    // 첫 번째 감지 (1바퀴 완료)
    if (wheelCount == 1) {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Lap 1 Done!");
      lcd.setCursor(0, 1);
      
      Serial.println(">>> 1바퀴 완료!");
      delay(1000);
    }
    
    // 두 번째 감지 (2바퀴 완료)
    if (wheelCount == 2) {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Lap 2 Done!");
      lcd.setCursor(0, 1);
      
      Serial.println(">>> 2바퀴 완료!");
      delay(1000);
    }
    
    // 세 번째 감지 (3바퀴 완료 - 완주!)
    if (wheelCount == 3) {
      unsigned long endTime = millis();
      lapTime = endTime - startTime;
      timerStarted = false;
      raceStarted = false;
      
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Lap 3 FINISH!");
      lcd.setCursor(0, 1);
      lcd.print("Time:");
      lcd.setCursor(6, 1);
      lcd.print(lapTime / 1000.0, 2);
      lcd.print("s");
      
      // 완주 부저음
      tone(BUZZER_PIN, 1500, 200);
      delay(300);
      tone(BUZZER_PIN, 1500, 200);
      delay(300);
      tone(BUZZER_PIN, 1500, 200);
      
      Serial.println("=================================");
      Serial.println(">>> 3바퀴 완주!");
      Serial.print(">>> 경과 시간: ");
      Serial.print(lapTime);
      Serial.print(" ms (");
      Serial.print(lapTime / 1000.0, 3);
      Serial.println(" 초)");
      Serial.println("=================================");
      
      delay(5000);  // 결과 표시
      
      // 초기화
      wheelCount = 0;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Press Reset");
      lcd.setCursor(0, 1);
      lcd.print("for next race");
      
      Serial.println("리셋 버튼을 눌러 다시 시작하세요.");
      
      // 무한 대기
      while(true) {
        delay(1000);
      }
    }
  }
  
  // 물체가 감지 범위를 벗어났을 때
  if (distance >= THRESHOLD || distance == 0) {
    if (isDetecting) {
      Serial.println("물체 범위 이탈");
    }
    isDetecting = false;
  }
  
  // 타이머 진행 중일 때 실시간 시간 업데이트 (0.1초마다)
  if (timerStarted && raceStarted) {
    unsigned long currentTime = millis();
    
    if (currentTime - lastUpdate >= 100) {
      lastUpdate = currentTime;
      unsigned long elapsed = currentTime - startTime;
      
      lcd.setCursor(0, 0);
      lcd.print("Racing...       ");
      lcd.setCursor(0, 1);
      lcd.print("Time:");
      lcd.setCursor(6, 1);
      lcd.print("       ");  // 이전 값 지우기
      lcd.setCursor(6, 1);
      lcd.print(elapsed / 1000.0, 2);
      lcd.print("s");
      
      Serial.print("[진행 중] 경과: ");
      Serial.print(elapsed);
      Serial.print(" ms (");
      Serial.print(elapsed / 1000.0, 2);
      Serial.println(" 초)");
    }
  }
  
  delay(50);  // 센서 안정화
}

#define TRIG_PIN 2
#define ECHO_PIN 3
#define THRESHOLD 15  // 감지 거리 임계값 (cm)

// 상태 변수
int wheelCount = 0;           // 바퀴 카운트
unsigned long startTime = 0;  // 타이머 시작 시간
unsigned long lapTime = 0;    // 랩타임 기록
bool isDetecting = false;     // 현재 감지 중인지 여부
bool timerStarted = false;    // 타이머 시작 여부

void setup() {
  Serial.begin(9600);
  
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  
  Serial.println("=================================");
  Serial.println("바퀴 감지 시스템 시작");
  Serial.println("Trig: 2번 핀, Echo: 3번 핀");
  Serial.println("감지 거리: 15cm 이내");
  Serial.println("=================================");
  Serial.println();
  
  delay(1000);
}

void loop() {
  long duration;
  float distance;
  
  // 초음파 센서로 거리 측정
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  
  duration = pulseIn(ECHO_PIN, HIGH, 30000);
  distance = duration * 0.034 / 2;
  
  // 거리가 임계값 이내로 감지되었을 때
  if (distance > 0 && distance < THRESHOLD && !isDetecting) {
    isDetecting = true;
    wheelCount++;
    
    Serial.print("바퀴 감지! (");
    Serial.print(wheelCount);
    Serial.print("번째 바퀴) - 거리: ");
    Serial.print(distance);
    Serial.println(" cm");
    
    // 첫 번째 바퀴 감지 시 타이머 시작
    if (wheelCount == 1) {
      startTime = millis();
      timerStarted = true;
      Serial.print(">>> 타이머 시작! (시작 시간: ");
      Serial.print(startTime);
      Serial.println(" ms)");
    }
    
    // 두 번째 바퀴 감지 시 타이머 기록
    if (wheelCount == 2) {
      unsigned long endTime = millis();
      lapTime = endTime - startTime;
      
      Serial.println("=================================");
      Serial.println(">>> 2바퀴 완주!");
      Serial.print(">>> 시작 시간: ");
      Serial.print(startTime);
      Serial.println(" ms");
      Serial.print(">>> 종료 시간: ");
      Serial.print(endTime);
      Serial.println(" ms");
      Serial.print(">>> 경과 시간: ");
      Serial.print(lapTime);
      Serial.print(" ms (");
      Serial.print(lapTime / 1000.0, 3);
      Serial.println(" 초)");
      Serial.println("=================================");
      Serial.println();
      
      // 초기화 (새로운 측정을 위해)
      wheelCount = 0;
      timerStarted = false;
      Serial.println("시스템 초기화 완료. 새로운 측정 대기 중...");
      Serial.println();
    }
  }
  
  // 물체가 감지 범위를 벗어났을 때 상태 초기화
  if (distance >= THRESHOLD || distance == 0) {
    if (isDetecting) {
      Serial.println("물체 범위 이탈 - 다음 감지 대기");
    }
    isDetecting = false;
  }
  
  // 타이머 진행 중일 때 실시간 시간 표시
  if (timerStarted && wheelCount == 1) {
    unsigned long currentTime = millis() - startTime;
    Serial.print("[타이머 진행 중] 경과 시간: ");
    Serial.print(currentTime);
    Serial.print(" ms (");
    Serial.print(currentTime / 1000.0, 2);
    Serial.println(" 초)");
  }
  
  // 거리 측정값 실시간 출력
  Serial.print("측정 거리: ");
  Serial.print(distance);
  Serial.print(" cm | 바퀴 카운트: ");
  Serial.print(wheelCount);
  Serial.print(" | 감지 상태: ");
  Serial.print(isDetecting ? "감지중" : "대기");
  Serial.print(" | 타이머: ");
  Serial.println(timerStarted ? "실행중" : "정지");
  
  delay(5000);  // 센서 안정화를 위한 딜레이
}
